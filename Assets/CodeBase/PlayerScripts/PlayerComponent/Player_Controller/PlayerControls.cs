//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/PlayerScripts/PlayerComponent/Player_Controller/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Control Player"",
            ""id"": ""de7be5bf-9b1c-44e8-a988-a3b1726c4bdd"",
            ""actions"": [
                {
                    ""name"": ""Look Up and Down"",
                    ""type"": ""Value"",
                    ""id"": ""2a83b3a5-82ab-4c5d-bd64-79b9b6ec139e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look Straight"",
                    ""type"": ""PassThrough"",
                    ""id"": ""076462df-ca02-4cea-9279-dc7b378e725b"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f390e2c1-aa63-45f3-935a-07959ee49256"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangetRotation"",
                    ""type"": ""Value"",
                    ""id"": ""93d5fb84-3be4-4d87-bf6c-60071ed15e90"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""87d72e4a-346d-4b16-b7fc-b750b54080eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Chosen Spell"",
                    ""type"": ""Button"",
                    ""id"": ""fa888450-cb31-4a35-8b45-b144f7877fe9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aauto Attack"",
                    ""type"": ""Button"",
                    ""id"": ""14fcec59-e6ad-49ce-ae3e-5699be2920c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open Spell Book"",
                    ""type"": ""Button"",
                    ""id"": ""2f2f91f7-38ce-4812-ae85-9c022f2e8116"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open Notes"",
                    ""type"": ""Button"",
                    ""id"": ""6e914c46-7f33-4c23-b1a1-0a7f58332fd0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open Tasks"",
                    ""type"": ""Button"",
                    ""id"": ""544fda4b-827e-451b-928a-ad2f28691146"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open Menu"",
                    ""type"": ""Button"",
                    ""id"": ""7aa337c2-a454-477e-a5fd-9ec141a288cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""ad385f3f-a18c-49c6-906e-c92665835e11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""b5819258-51f8-4343-8b89-22e107e35b84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack The Target"",
                    ""type"": ""Button"",
                    ""id"": ""53db18a7-86f0-4634-badf-c63a6f017bb3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""View Target Information"",
                    ""type"": ""Button"",
                    ""id"": ""90ad8077-a1fb-4496-b138-18ab6258b02a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pick Up Item And Loot"",
                    ""type"": ""Button"",
                    ""id"": ""5bb4caa9-57ef-40c4-936a-26c6d9001819"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""View Item Details"",
                    ""type"": ""Button"",
                    ""id"": ""eba3577b-bc5a-4c83-8cfe-086e47f70f84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Step Mode"",
                    ""type"": ""Button"",
                    ""id"": ""49b883ca-9087-4c6b-8570-740051fa57a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""1055f95b-c7b1-4c92-9b71-22fbd7de1f69"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look Up and Down"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""5378df3f-ca67-420a-8197-97bcb31c7e72"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look Up and Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""a92f0273-9bf3-4169-bbd6-e613b360a300"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look Up and Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""85f54f62-1a1e-4ac5-bb8b-0857d71a0db4"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Look Straight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed841f32-b7cb-4226-a40a-ef8d83f28425"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d400be1-5ebe-4341-8843-c2d10c2aa74a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Chosen Spell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3f5593f-f0f5-46c1-a474-0b049bab00df"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Aauto Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18742f6d-f7e9-49db-8be5-66498d26a647"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Open Spell Book"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c48a2be-feea-48a8-96ae-da8a7c2b47db"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Open Notes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e5406ba-b439-4468-9828-020332bf968e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Open Tasks"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e34a434-fd07-4aed-8185-b05e990ed682"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Open Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fc03272-f329-40e8-98ea-b61c5edb4cf3"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Open Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d21b4c7-383f-4e7f-a14c-c6bdded0ed8c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""517bf2aa-8f51-4b31-a7ca-9630ee778e93"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Attack The Target"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c238499-31e0-4393-9eb4-8199518d795e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""View Target Information"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bad97b02-bc96-4276-9ec4-66007140d6d7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Pick Up Item And Loot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0722e699-2cbf-4606-837b-9c493f30024d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""View Item Details"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f3012a1-8e23-4dec-8766-d844a3b27eba"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Step Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a5ad49b3-0af5-4034-bbd2-32615e67716a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1fcbddbe-c98d-4134-963e-61099b60faf1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""71ddd967-785f-4303-8354-39e60cad2165"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f474009e-933b-4b36-a2c0-51e5b973fdf3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangetRotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""1601b8c7-daab-4efc-be8d-32abaa92bec7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangetRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""ad86bfcb-1392-4a51-ab87-ff9f1ecbb70e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangetRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse and Keyboard"",
            ""bindingGroup"": ""Mouse and Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Control Player
        m_ControlPlayer = asset.FindActionMap("Control Player", throwIfNotFound: true);
        m_ControlPlayer_LookUpandDown = m_ControlPlayer.FindAction("Look Up and Down", throwIfNotFound: true);
        m_ControlPlayer_LookStraight = m_ControlPlayer.FindAction("Look Straight", throwIfNotFound: true);
        m_ControlPlayer_Move = m_ControlPlayer.FindAction("Move", throwIfNotFound: true);
        m_ControlPlayer_ChangetRotation = m_ControlPlayer.FindAction("ChangetRotation", throwIfNotFound: true);
        m_ControlPlayer_Sprint = m_ControlPlayer.FindAction("Sprint", throwIfNotFound: true);
        m_ControlPlayer_ChosenSpell = m_ControlPlayer.FindAction("Chosen Spell", throwIfNotFound: true);
        m_ControlPlayer_AautoAttack = m_ControlPlayer.FindAction("Aauto Attack", throwIfNotFound: true);
        m_ControlPlayer_OpenSpellBook = m_ControlPlayer.FindAction("Open Spell Book", throwIfNotFound: true);
        m_ControlPlayer_OpenNotes = m_ControlPlayer.FindAction("Open Notes", throwIfNotFound: true);
        m_ControlPlayer_OpenTasks = m_ControlPlayer.FindAction("Open Tasks", throwIfNotFound: true);
        m_ControlPlayer_OpenMenu = m_ControlPlayer.FindAction("Open Menu", throwIfNotFound: true);
        m_ControlPlayer_OpenInventory = m_ControlPlayer.FindAction("Open Inventory", throwIfNotFound: true);
        m_ControlPlayer_Interact = m_ControlPlayer.FindAction("Interact", throwIfNotFound: true);
        m_ControlPlayer_AttackTheTarget = m_ControlPlayer.FindAction("Attack The Target", throwIfNotFound: true);
        m_ControlPlayer_ViewTargetInformation = m_ControlPlayer.FindAction("View Target Information", throwIfNotFound: true);
        m_ControlPlayer_PickUpItemAndLoot = m_ControlPlayer.FindAction("Pick Up Item And Loot", throwIfNotFound: true);
        m_ControlPlayer_ViewItemDetails = m_ControlPlayer.FindAction("View Item Details", throwIfNotFound: true);
        m_ControlPlayer_StepMode = m_ControlPlayer.FindAction("Step Mode", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Control Player
    private readonly InputActionMap m_ControlPlayer;
    private List<IControlPlayerActions> m_ControlPlayerActionsCallbackInterfaces = new List<IControlPlayerActions>();
    private readonly InputAction m_ControlPlayer_LookUpandDown;
    private readonly InputAction m_ControlPlayer_LookStraight;
    private readonly InputAction m_ControlPlayer_Move;
    private readonly InputAction m_ControlPlayer_ChangetRotation;
    private readonly InputAction m_ControlPlayer_Sprint;
    private readonly InputAction m_ControlPlayer_ChosenSpell;
    private readonly InputAction m_ControlPlayer_AautoAttack;
    private readonly InputAction m_ControlPlayer_OpenSpellBook;
    private readonly InputAction m_ControlPlayer_OpenNotes;
    private readonly InputAction m_ControlPlayer_OpenTasks;
    private readonly InputAction m_ControlPlayer_OpenMenu;
    private readonly InputAction m_ControlPlayer_OpenInventory;
    private readonly InputAction m_ControlPlayer_Interact;
    private readonly InputAction m_ControlPlayer_AttackTheTarget;
    private readonly InputAction m_ControlPlayer_ViewTargetInformation;
    private readonly InputAction m_ControlPlayer_PickUpItemAndLoot;
    private readonly InputAction m_ControlPlayer_ViewItemDetails;
    private readonly InputAction m_ControlPlayer_StepMode;
    public struct ControlPlayerActions
    {
        private @PlayerControls m_Wrapper;
        public ControlPlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LookUpandDown => m_Wrapper.m_ControlPlayer_LookUpandDown;
        public InputAction @LookStraight => m_Wrapper.m_ControlPlayer_LookStraight;
        public InputAction @Move => m_Wrapper.m_ControlPlayer_Move;
        public InputAction @ChangetRotation => m_Wrapper.m_ControlPlayer_ChangetRotation;
        public InputAction @Sprint => m_Wrapper.m_ControlPlayer_Sprint;
        public InputAction @ChosenSpell => m_Wrapper.m_ControlPlayer_ChosenSpell;
        public InputAction @AautoAttack => m_Wrapper.m_ControlPlayer_AautoAttack;
        public InputAction @OpenSpellBook => m_Wrapper.m_ControlPlayer_OpenSpellBook;
        public InputAction @OpenNotes => m_Wrapper.m_ControlPlayer_OpenNotes;
        public InputAction @OpenTasks => m_Wrapper.m_ControlPlayer_OpenTasks;
        public InputAction @OpenMenu => m_Wrapper.m_ControlPlayer_OpenMenu;
        public InputAction @OpenInventory => m_Wrapper.m_ControlPlayer_OpenInventory;
        public InputAction @Interact => m_Wrapper.m_ControlPlayer_Interact;
        public InputAction @AttackTheTarget => m_Wrapper.m_ControlPlayer_AttackTheTarget;
        public InputAction @ViewTargetInformation => m_Wrapper.m_ControlPlayer_ViewTargetInformation;
        public InputAction @PickUpItemAndLoot => m_Wrapper.m_ControlPlayer_PickUpItemAndLoot;
        public InputAction @ViewItemDetails => m_Wrapper.m_ControlPlayer_ViewItemDetails;
        public InputAction @StepMode => m_Wrapper.m_ControlPlayer_StepMode;
        public InputActionMap Get() { return m_Wrapper.m_ControlPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IControlPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlPlayerActionsCallbackInterfaces.Add(instance);
            @LookUpandDown.started += instance.OnLookUpandDown;
            @LookUpandDown.performed += instance.OnLookUpandDown;
            @LookUpandDown.canceled += instance.OnLookUpandDown;
            @LookStraight.started += instance.OnLookStraight;
            @LookStraight.performed += instance.OnLookStraight;
            @LookStraight.canceled += instance.OnLookStraight;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @ChangetRotation.started += instance.OnChangetRotation;
            @ChangetRotation.performed += instance.OnChangetRotation;
            @ChangetRotation.canceled += instance.OnChangetRotation;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @ChosenSpell.started += instance.OnChosenSpell;
            @ChosenSpell.performed += instance.OnChosenSpell;
            @ChosenSpell.canceled += instance.OnChosenSpell;
            @AautoAttack.started += instance.OnAautoAttack;
            @AautoAttack.performed += instance.OnAautoAttack;
            @AautoAttack.canceled += instance.OnAautoAttack;
            @OpenSpellBook.started += instance.OnOpenSpellBook;
            @OpenSpellBook.performed += instance.OnOpenSpellBook;
            @OpenSpellBook.canceled += instance.OnOpenSpellBook;
            @OpenNotes.started += instance.OnOpenNotes;
            @OpenNotes.performed += instance.OnOpenNotes;
            @OpenNotes.canceled += instance.OnOpenNotes;
            @OpenTasks.started += instance.OnOpenTasks;
            @OpenTasks.performed += instance.OnOpenTasks;
            @OpenTasks.canceled += instance.OnOpenTasks;
            @OpenMenu.started += instance.OnOpenMenu;
            @OpenMenu.performed += instance.OnOpenMenu;
            @OpenMenu.canceled += instance.OnOpenMenu;
            @OpenInventory.started += instance.OnOpenInventory;
            @OpenInventory.performed += instance.OnOpenInventory;
            @OpenInventory.canceled += instance.OnOpenInventory;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @AttackTheTarget.started += instance.OnAttackTheTarget;
            @AttackTheTarget.performed += instance.OnAttackTheTarget;
            @AttackTheTarget.canceled += instance.OnAttackTheTarget;
            @ViewTargetInformation.started += instance.OnViewTargetInformation;
            @ViewTargetInformation.performed += instance.OnViewTargetInformation;
            @ViewTargetInformation.canceled += instance.OnViewTargetInformation;
            @PickUpItemAndLoot.started += instance.OnPickUpItemAndLoot;
            @PickUpItemAndLoot.performed += instance.OnPickUpItemAndLoot;
            @PickUpItemAndLoot.canceled += instance.OnPickUpItemAndLoot;
            @ViewItemDetails.started += instance.OnViewItemDetails;
            @ViewItemDetails.performed += instance.OnViewItemDetails;
            @ViewItemDetails.canceled += instance.OnViewItemDetails;
            @StepMode.started += instance.OnStepMode;
            @StepMode.performed += instance.OnStepMode;
            @StepMode.canceled += instance.OnStepMode;
        }

        private void UnregisterCallbacks(IControlPlayerActions instance)
        {
            @LookUpandDown.started -= instance.OnLookUpandDown;
            @LookUpandDown.performed -= instance.OnLookUpandDown;
            @LookUpandDown.canceled -= instance.OnLookUpandDown;
            @LookStraight.started -= instance.OnLookStraight;
            @LookStraight.performed -= instance.OnLookStraight;
            @LookStraight.canceled -= instance.OnLookStraight;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @ChangetRotation.started -= instance.OnChangetRotation;
            @ChangetRotation.performed -= instance.OnChangetRotation;
            @ChangetRotation.canceled -= instance.OnChangetRotation;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @ChosenSpell.started -= instance.OnChosenSpell;
            @ChosenSpell.performed -= instance.OnChosenSpell;
            @ChosenSpell.canceled -= instance.OnChosenSpell;
            @AautoAttack.started -= instance.OnAautoAttack;
            @AautoAttack.performed -= instance.OnAautoAttack;
            @AautoAttack.canceled -= instance.OnAautoAttack;
            @OpenSpellBook.started -= instance.OnOpenSpellBook;
            @OpenSpellBook.performed -= instance.OnOpenSpellBook;
            @OpenSpellBook.canceled -= instance.OnOpenSpellBook;
            @OpenNotes.started -= instance.OnOpenNotes;
            @OpenNotes.performed -= instance.OnOpenNotes;
            @OpenNotes.canceled -= instance.OnOpenNotes;
            @OpenTasks.started -= instance.OnOpenTasks;
            @OpenTasks.performed -= instance.OnOpenTasks;
            @OpenTasks.canceled -= instance.OnOpenTasks;
            @OpenMenu.started -= instance.OnOpenMenu;
            @OpenMenu.performed -= instance.OnOpenMenu;
            @OpenMenu.canceled -= instance.OnOpenMenu;
            @OpenInventory.started -= instance.OnOpenInventory;
            @OpenInventory.performed -= instance.OnOpenInventory;
            @OpenInventory.canceled -= instance.OnOpenInventory;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @AttackTheTarget.started -= instance.OnAttackTheTarget;
            @AttackTheTarget.performed -= instance.OnAttackTheTarget;
            @AttackTheTarget.canceled -= instance.OnAttackTheTarget;
            @ViewTargetInformation.started -= instance.OnViewTargetInformation;
            @ViewTargetInformation.performed -= instance.OnViewTargetInformation;
            @ViewTargetInformation.canceled -= instance.OnViewTargetInformation;
            @PickUpItemAndLoot.started -= instance.OnPickUpItemAndLoot;
            @PickUpItemAndLoot.performed -= instance.OnPickUpItemAndLoot;
            @PickUpItemAndLoot.canceled -= instance.OnPickUpItemAndLoot;
            @ViewItemDetails.started -= instance.OnViewItemDetails;
            @ViewItemDetails.performed -= instance.OnViewItemDetails;
            @ViewItemDetails.canceled -= instance.OnViewItemDetails;
            @StepMode.started -= instance.OnStepMode;
            @StepMode.performed -= instance.OnStepMode;
            @StepMode.canceled -= instance.OnStepMode;
        }

        public void RemoveCallbacks(IControlPlayerActions instance)
        {
            if (m_Wrapper.m_ControlPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlPlayerActions @ControlPlayer => new ControlPlayerActions(this);
    private int m_MouseandKeyboardSchemeIndex = -1;
    public InputControlScheme MouseandKeyboardScheme
    {
        get
        {
            if (m_MouseandKeyboardSchemeIndex == -1) m_MouseandKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse and Keyboard");
            return asset.controlSchemes[m_MouseandKeyboardSchemeIndex];
        }
    }
    public interface IControlPlayerActions
    {
        void OnLookUpandDown(InputAction.CallbackContext context);
        void OnLookStraight(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnChangetRotation(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnChosenSpell(InputAction.CallbackContext context);
        void OnAautoAttack(InputAction.CallbackContext context);
        void OnOpenSpellBook(InputAction.CallbackContext context);
        void OnOpenNotes(InputAction.CallbackContext context);
        void OnOpenTasks(InputAction.CallbackContext context);
        void OnOpenMenu(InputAction.CallbackContext context);
        void OnOpenInventory(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnAttackTheTarget(InputAction.CallbackContext context);
        void OnViewTargetInformation(InputAction.CallbackContext context);
        void OnPickUpItemAndLoot(InputAction.CallbackContext context);
        void OnViewItemDetails(InputAction.CallbackContext context);
        void OnStepMode(InputAction.CallbackContext context);
    }
}
